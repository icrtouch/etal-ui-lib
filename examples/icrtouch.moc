// Short Explation of what script is for here.


// Global Variables
local bDebugPrinting = true;    // debug logging, set this to false before letting it out

// Load Libraries
dofile("etal\\lib\\keys.moc"); 
dofile("etal\\lib\\json.moc"); 
dofile("etal\\lib\\strings.moc"); 
dofile("etal\\lib\\dates.moc");

dofile("etal\\lib\\timer.moc");
dofile("etal\\lib\\gui\\gui.moc");
dofile("etal\\lib\\state.moc");

local UI = GUI();
local TimerControl = TimerController()

local stateManagement = State.getInstance()
stateManagement.setStateCallback({
	callback=function(){
		UI.redraw();
	}
})


local AnimationTimer = null;

local growing = true;
local containerGrowing = false;
/**********************************************************************
OnInit
Called when the till starts
**********************************************************************/

function OnInit()
{
    ICR_SetLocalUserData("bDebugPrinting", bDebugPrinting, true);
    //ICR_EnableDebugLog(bDebugPrinting);
    if(bDebugPrinting)
    {
        ICR_SetFeature("CONSOLE",bDebugPrinting);
        ICR_SetFeature("AUTORESTART",bDebugPrinting);
    }
    // After Init pretend we left pgm 3 where we load settings.  
    AfterModeChange(10,7);

	UI.setTimerController(TimerControl);
	UI.createWindow("window.xml");
	UI.disableWindow();
	UI.debug = false;

	draw_all_objects();

}






function OnWindowPaint(nID){ 
    UI.runPaintEvents(nID);
}

function OnMouseEvent(nWindowID, nEvent, nX, nY) {
	UI.handleMouseEvents(nWindowID,nEvent,nX,nY);
}
/************************************************************************************
* OnTimer(nTimerID, nSystemTime)
* Called when the timer nTimerID from ICR_StartTimer() function has expired.
*************************************************************************************/

function OnTimer(nTimerID, nSystemTime)
{
   TimerControl.run_timers(nTimerID);
}




/**********************************************************************
* AfterModeChange
* Called When Pos changes Modes
**********************************************************************/

function AfterModeChange(nFrom,nTo)
{
    if (nFrom == 10) // Left PGM 3
    {
        // Force a Save
        ICR_SetLocalUserData("bDebugPrinting", false );
        // Do we need to load any global var from the userdata ? 
        
    }
}


/**************************************************************************************
* BeforeKeyPress()
* Occurs before any key is pressed. return false to stop the press. true to continue
***************************************************************************************/

function BeforeKeyPress(nFile,nRecord,nKeytype)
{
    if(bDebugPrinting)print("BKP nFile"+nFile+ " nRecord"+nRecord + " nKeytype"+nKeytype);
    return true; // Carry on and press key.
}


/**********************************************************************
*AfterKeyPress
* Occurs after any key is pressed.
**********************************************************************/

function AfterKeyPress(nFile,nRecord,nKeytype)
{
    if(bDebugPrinting)print("AKP nFile"+nFile+ " nRecord"+nRecord + " nKeytype"+nKeytype);
}


/************************************************************************************
* OnRunScriptKeyPress
* Occurs when script status key is pressed. 
*************************************************************************************/

function OnRunScriptKeyPress(nFile, nRecord, nNumber, nValue, nFlag)
{
   
}

/**********************************************************************
 OnEnterPGMMenu
 Occurs when we go to PGM3 Etal for script. 
**********************************************************************/

function OnEnterPGMMenu(nSub)
{
    local nID=0;
    ICR_PurgeProgramSettings();
    switch(nSub)
    {
        case 0:
            // Main MENU Options 
            ICR_AdvertiseProgramSetting(" Version Info", "SCRIPTVERINF");
            break;
        default:
            // in case we get somewhere we shouldn't
            ICR_AdvertiseProgramHeading("This menu doesnot exist");
            break;
    }
}





function draw_all_objects(){



		UI.enableWindow();
		//UI.debug = true;

		local mainbox = BoxObject(UI, {
			identifier="Wrapper",
			zDepth=1,
			clickable=false,
			position={x=0,y=0},
			size={x=0,y=0},
			color=Color().white,
			//borderRadius=20,
		});
		local mc = ConstraintController();
		mc.setWidth(PercentageConstraint(100));
		mc.setHeight(PercentageConstraint(100));
		mc.setX(CenterConstraint())
		mainbox.setConstraintController(mc);


		local Container = BoxObject(UI, {
			identifier="Container"
			color=0xf2f2f2,
			size={x=900,y=700}
		})
		local ccc = ConstraintController();
		//ccc.setWidth(PercentageConstraint(90));
		ccc.setHeight(PercentageConstraint(80));
		ccc.setX(CenterConstraint());
		ccc.setY(CenterConstraint());
		Container.setConstraintController(ccc);





		local closeBtn = ButtonObject(UI,{
			text="Close",
			fontColor=Color().danger_font,
			color=Color().danger_bg,
			size={x=100,y=35},
			position={x=10,y=10},
			borderRadius=5,
		
			
			onClick=function(){
				UI.deleteAllObjects();
				UI.disableWindow();
				UI.redraw();
			}
		})

		mainbox.addChildObject(closeBtn);

		local title = TextObject(UI,{
			text="GUI Object Display",
			fontSize=30,
			fontColor=Color().lightgray,
			fontName="Calibri",
			position={x=400,y=10},
	
		});

		mainbox.addChildObject(title);
		mainbox.addChildObject(closeBtn);


		//TEXT OBJECT		
		local textObjectSample = TextObject(UI,{
			text="Sample Text Object ",
			fontSize=27,
			fontColor=Color().lightgray,
			position={x=10,y=10},
			bindText=function(){
				local s = State.getInstance();
				local count = s.getState("counter", 0);
				return "Sample Text Object : " + count;
			}
		});
		Container.addChildObject(textObjectSample);

		//Box OBJECT
		local BoxObjectSample = BoxObject(UI,{
			size={x=80,y=80},
			color=Color().blue,
			position={x=10,y=50},
		});
		Container.addChildObject(BoxObjectSample);

		//Box OBJECT
		local ButtonObjectSample = ButtonObject(UI,{
			identifier="Button"
			size={x=120,y=40},
			color=Color().gray,
			zDepth=10,
			position={x=10,y=150},
			text="Sample Button",
			borderRadius=10,
			onMouseDown=function(){
				this.color = Color().lightgray;
			},
			onMouseUp=function(){
				this.color = Color().gray;
			},
			onClick=function(){

				local state = State.getInstance()
				local stateCounter = state.getState("counter", 0);
				stateCounter = stateCounter + 1;
				state.setState("counter", stateCounter);
				
			},
		});
		Container.addChildObject(ButtonObjectSample);		

		//Banner OBJECT
		local BoxObjectSample = BannerObject(UI,{
			size={x=300,y=50},
			color=Color().lightgray,
			fontColor=Color().black,
			position={x=10,y=205},
			text="Banner Text Sample",
			bindText=function(){
				local s = State.getInstance();
				local count = s.getState("counter", 0);
				return "Banner Text Sample : " + count;
			}
		});
		Container.addChildObject(BoxObjectSample);

		
		//Box OBJECT radius
		local TextInputSample = TextInputObject(UI,{
			identifier="inputbox",
			zDepth=1,
			size={x=230,y=30},
			color=Color().lightgray,
			fontColor=Color().black,
			position={x=10,y=270},
			placeholder="Placeholder here",
			borderColor=Color().gray
		});
		Container.addChildObject(TextInputSample);


		local progress = ProgressBarObject(UI,{
			size={x=230,y=20},
			position={x=10,y=315}
			color=Color().lightgray,
			percent=90
			percentColor=Color().green
		});
		Container.addChildObject(progress);

		local progress = ProgressBarObject(UI,{
			size={x=230,y=20},
			position={x=10,y=340}
			color=Color().lightgray,
			percent=50,
			bindPercent=function(){
				local s = State.getInstance();
				return s.getState("counter", 0);
			}
		});
		Container.addChildObject(progress);


		local progress = ProgressBarObject(UI,{
			size={x=230,y=20},
			position={x=10,y=365}
			color=Color().lightgray,
			percentColor=Color().red,
			percent=20
		});
		Container.addChildObject(progress);



		 local mainCalendar = CalendarObject(UI, {
                                        identifier="calendar",
                                        zDepth=1,
                                        clickable=false,
                                        position={x=380,y=10},
                                        size={x=0,y=0},
                                        onlyFilterClick=true,
                                        selectMultiple=false,
                                        month=11,
                                        year=2020,
                                        dateSelectedCallback=function(selected_dates){
                                           
                                        },
                                        failSelectedCallback=function(){

                                        }
                            });
		local ccc = ConstraintController();
		ccc.setWidth(PercentageConstraint(30));
		ccc.setHeight(PercentageConstraint(40));
		mainCalendar.setConstraintController(ccc);
		Container.addChildObject(mainCalendar)

		//Box OBJECT with a border radius, (curved corners)
		local BoxObjectSample = BoxObject(UI,{
			identifier="AnimationBox"
			size={x=300,y=300},
			color=Color().lightgray,
			position={x=380,y=240},
			borderRadius=20
		});
		Container.addChildObject(BoxObjectSample);	

		//Add a smaller Blue box inside this box and center it
		local innerBoxObjectSample = BoxObject(UI,{
			size={x=100,y=100},
			color=Color().blue,
			position={x=20,y=350},
			borderRadius=20
		});
		local cc = ConstraintController()
		cc.setWidth(PercentageConstraint(50))
		cc.setHeight(PercentageConstraint(50))
		cc.setX(CenterConstraint());
		cc.setY(CenterConstraint());
		BoxObjectSample.addChildObject(innerBoxObjectSample)

		//lets add some text to the center of that box
		local textInner = TextObject(UI, {
			text="Easy Centering",
		})
		local cct = ConstraintController()
		cct.setX(CenterConstraint())
		cct.setY(CenterConstraint())
		textInner.setConstraintController(cct)
		innerBoxObjectSample.addChildObject(textInner)


		local ClickToAnimate = ButtonObject(UI, {
			text="Click To Animate",
			color=Color().gray,
			size={x=200,y=40},
			position={x=0,y=20},
			zDepth=20
			onClick=function(){
				print("Clicked");
				AnimationTimer = TimerControl.setInterval({callback=function(timer,i){

					local box = UI.findObject("AnimationBox")
						if(box != null){
						local cwidth = box.size.x;
						if(growing == true){
							cwidth = cwidth + 20;
						} else {
							cwidth = cwidth - 20;
						}

						if(cwidth > 500){
							growing = false;
						} 
						if(cwidth < 300){
							growing = true;
						}
						
						box.setSize(cwidth, box.size.y);
						UI.redraw();
					}
				}}, 3)

			}

		})
		local ccb = ConstraintController()
		ccb.setX(CenterConstraint())
		ClickToAnimate.setConstraintController(ccb);
		BoxObjectSample.addChildObject(ClickToAnimate)
		innerBoxObjectSample.setConstraintController(cc);


		local openModal = ButtonObject(UI, {
			text="Open Modal",
			position={x=10,y=410},
			size={x=120,y=40},
			zDepth=20,
			color=Color().gray,
			onClick=function(){
				local Modal = ModalObject(UI, {
					position={x=0,y=0},
					size={x=0,y=0},
					color=0xf2f2f2,
					zDepth=10,
					DoneCallback={
						callback=function(){
								
						}
					}
				})
				local constrain = ConstraintController();
				constrain.setWidth(PercentageConstraint(50));
				constrain.setHeight(PercentageConstraint(50));
				constrain.setX(CenterConstraint());
				constrain.setY(CenterConstraint())
				Modal.setConstraintController(constrain);

				local modalContent = TextObject(UI,{
					text="This is inside the modal",
					fontColor=Color().black
				});
				Modal.addContent(modalContent);

				
				mainbox.addChildObject(Modal)
			}
		})

		local ClickToAnimateBig = ButtonObject(UI, {
			text="Click To Animate Whole Area",
			color=Color().danger_btn_bg,
			size={x=250,y=40},
			position={x=10,y=480},
			zDepth=20
			onClick=function(){
				print("Clicked");
				AnimationTimer = TimerControl.setInterval({callback=function(timer,i){

					local box = UI.findObject("Container")
						if(box != null){
						local cwidth = box.size.x;
						if(containerGrowing == true){
							cwidth = cwidth + 10;
						} else {
							cwidth = cwidth - 10;
						}

						if(cwidth > 900){
							containerGrowing = false;
						} 
						if(cwidth < 700){
							containerGrowing = true;
						}
						
						box.setSize(cwidth, box.size.y);
						UI.redraw();
					}
				}}, 3)

			}

		})
		Container.addChildObject(ClickToAnimateBig)
		Container.addChildObject(openModal)



		mainbox.addChildObject(Container);
		UI.addObject(mainbox);
		UI.redraw();



}